syntax = "proto3";

package darcher;

import "google/protobuf/empty.proto";
import "common.proto";

option java_package = "org.kristen.rpc.darcher";

service DAppTestDriverService {
  /**
  DApp driver should call notifyTestStart() rpc once when test starts
   */
  rpc notifyTestStart(TestStartMsg) returns (google.protobuf.Empty) {}

  /**
  DApp driver should call notifyTestEnd() rpc once when test ends
   */
  rpc notifyTestEnd(TestEndMsg) returns (google.protobuf.Empty) {}

  /**
  Each time DApp driver performs a `send transaction` operation, it should call waitForTxProcess() rpc immediately after transaction is send.
  This rpc call may block for arbitrary amount of time. DApp driver must wait for this rpc call to return.
   */
  rpc waitForTxProcess(TxMsg) returns (google.protobuf.Empty) {}

  /**
  Reverse rpc to let darcher control dapp driver.
  Reverse rpc is implemented with bidirectional stream grpc, in order to make it possible to let server send rpc call to client.
  Client should first send an initial DAppDriverControlMsg to server and maintain the input/output stream and act as a logical rpc server.
  During the connection, server may send a DAppDriverControlMsg as request to client and client should respond with the same (role, id, dapp_name, instance_id)
   */
  rpc dappDriverControl(stream DAppDriverControlMsg) returns (stream DAppDriverControlMsg) {}

  /**
  DApp driver should call notifyConsoleError when there is an error in dapp console
   */
  rpc notifyConsoleError(ConsoleErrorMsg) returns (google.protobuf.Empty) {}
}

message TestStartMsg {
  string dapp_name = 1; // name of dapp, only used to identify a dapp
  string instance_id = 2; // id of the instance of the dapp. One dapp could have multiple instances (e.g. multiple websites)
}

message TestEndMsg {
  string dapp_name = 1; // name of dapp, should keep consistent with that in TestStartMsg
  string instance_id = 2; // id of the instance of the dapp. One dapp could have multiple instances (e.g. multiple websites)
}

message TxMsg {
  string dapp_name = 1; // name of dapp, should keep consistent with that in TestStartMsg
  string instance_id = 2; // id of the instance of the dapp. One dapp could have multiple instances (e.g. multiple websites)
  string hash = 3; // hash of the transaction, in the form of hex string
  string from = 4; // transaction sender account, hex string
  string to = 5; // transaction receiver account, hex string
  string states = 6; // states (name and url) experienced on the dapp so far
  string events = 7; // events (event type, identification of elements, tag, etc.) executed on the dapp so far
}

message ConsoleErrorMsg {
  string dapp_name = 1; // name of dapp, should keep consistent with that in TestStartMsg
  string instance_id = 2; // id of the instance of the dapp. One dapp could have multiple instances (e.g. multiple websites)
  string error_string = 3; // error string
}

enum DAppDriverControlType{
  NilType = 0; // do nothing, we have a NilType here to avoid using default value of grpc message.
  Refresh = 1; // tell dapp driver to refresh page
}

message DAppDriverControlMsg {
  Role role = 1; // role of grpc client, should always be Role.DAPP (defined in common.proto) in DAppTestDriverService
  string id = 2; // id of one reverse rpc request, the corresponding response should keep this id.
  string dapp_name = 3; // name of dapp, should keep consistent with that in TestStartMsg
  string instance_id = 4; // id of the instance of the dapp. One dapp could have multiple instances (e.g. multiple websites)
  DAppDriverControlType control_type = 5;
}