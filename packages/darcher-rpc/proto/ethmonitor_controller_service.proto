syntax = "proto3";

package darcher;

import "common.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/Troublor/darcher-go-ethereum/ethmonitor/rpc";

service EthmonitorControllerService {
  rpc notifyTxReceived(TxReceivedMsg) returns (google.protobuf.Empty) {}
  rpc notifyTxFinished(TxFinishedMsg) returns (google.protobuf.Empty) {}
  rpc notifyTxTraverseStart(TxTraverseStartMsg) returns (google.protobuf.Empty) {}
  rpc notifyTxStateChangeMsg(TxStateChangeMsg) returns (google.protobuf.Empty) {}
  rpc askForNextState(TxStateControlMsg) returns (TxStateControlMsg) {}
  rpc selectTx(SelectTxControlMsg) returns (SelectTxControlMsg) {}
  rpc notifyTxError(TxErrorMsg) returns (google.protobuf.Empty) {}
}

message TxReceivedMsg {
  string hash = 1;
}

message TxFinishedMsg {
  string hash = 1;
}

message TxTraverseStartMsg {
  string hash = 1;
}

message TxStateChangeMsg {
  string hash = 1;
  TxState from = 2;
  TxState to = 3;
}

message TxStateControlMsg {
  string hash = 1;
  TxState current_state = 2;
  TxState next_state = 3;
}

message SelectTxControlMsg {
  repeated string candidate_hashes = 1;
  string selection = 2;
}

/**
TxError refers to errors that make transaction cannot be mined, or transaction is reverted due to internal errors in smart contract.
 */
enum TxErrorType {
  NIL_TxErr = 0; // nil type, should not be used.
  REVERT = 1; // internal error in smart contract occurs, transaction is reverted
  REJECT = 2; // bad transaction which cannot be mined and rejected by evm
}

message TxErrorMsg {
  string hash = 1;
  TxErrorType type = 2;
  string description = 3;
}