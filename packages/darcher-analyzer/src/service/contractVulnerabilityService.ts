import {getUUID, Logger, ReverseRPCClient, Service} from "@darcher/helpers";
import {
    ContractVulReport,
    GetReportsByContractControlMsg,
    GetReportsByTransactionControlMsg,
    IContractVulnerabilityServiceServer,
    Role
} from "@darcher/rpc";
import {ServerDuplexStream} from "grpc";

export class ContractVulnerabilityService implements IContractVulnerabilityServiceServer, Service {
    private readonly logger: Logger;

    private readonly getReportsByContractControlReverseRPC: ReverseRPCClient<GetReportsByContractControlMsg, GetReportsByContractControlMsg>;
    private readonly getReportsByTransactionControlReverseRPC: ReverseRPCClient<GetReportsByTransactionControlMsg, GetReportsByTransactionControlMsg>;

    constructor(logger: Logger) {
        this.logger = logger;
        this.getReportsByContractControlReverseRPC = new ReverseRPCClient<GetReportsByContractControlMsg, GetReportsByContractControlMsg>("getReportsByContract");
        this.getReportsByTransactionControlReverseRPC = new ReverseRPCClient<GetReportsByTransactionControlMsg, GetReportsByTransactionControlMsg>("getReportsByTransaction");
    }

    async start(): Promise<void> {
        return Promise.resolve();
    }

    async shutdown(): Promise<void> {
        await this.getReportsByContractControlReverseRPC.close();
        await this.getReportsByTransactionControlReverseRPC.close();
    }

    async waitForEstablishment(): Promise<void> {
        await this.getReportsByContractControlReverseRPC.waitForEstablishment();
        await this.getReportsByTransactionControlReverseRPC.waitForEstablishment();
    }

    /**
     * grpc getReportsByContractControl, to establish reverse rpc
     * @param call
     */
    getReportsByContractControl(call: ServerDuplexStream<GetReportsByContractControlMsg, GetReportsByContractControlMsg>): void {
        if (this.getReportsByContractControlReverseRPC.established) {
            this.logger.warn("getReportsByContractControlReverseRPC already established, ignore new request");
            return;
        }
        // serve the initial call
        this.logger.info("getReportsByContractControl reverse RPC connected");
        this.getReportsByContractControlReverseRPC.establish(call);
    }

    /**
     * grpc getReportsByTransactionControl, to establish reverse rpc
     * @param call
     */
    getReportsByTransactionControl(call: ServerDuplexStream<GetReportsByTransactionControlMsg, GetReportsByTransactionControlMsg>): void {
        if (this.getReportsByTransactionControlReverseRPC.established) {
            this.logger.warn("getReportsByTransactionControlReverseRPC already established, ignore new request");
            return;
        }
        // serve the initial call
        this.logger.info("getReportsByTransactionControl reverse RPC connected");
        this.getReportsByTransactionControlReverseRPC.establish(call);
    }

    /**
     * Public function to get vulnerability reports by contract address
     * @param contractAddr
     */
    public async getReportsByContract(contractAddr: string): Promise<ContractVulReport[]> {
        let req = new GetReportsByContractControlMsg();
        req.setRole(Role.DOER)
            .setId(getUUID())
            .setAddress(contractAddr);
        let resp = await this.getReportsByContractControlReverseRPC.call(req);
        return resp.getReportsList();
    }

    /**
     * Public function to get vulnerability reports by transaction hash
     * @param txHash
     */
    public async getReportsByTransaction(txHash: string): Promise<ContractVulReport[]> {
        let req = new GetReportsByTransactionControlMsg();
        req.setRole(Role.DOER)
            .setId(getUUID())
            .setHash(txHash);
        let resp = await this.getReportsByTransactionControlReverseRPC.call(req);
        return resp.getReportsList();
    }
}